---
options:
   out_width: 100%
---

Title: 'Forecasting s-curves is hard' - a Julia tour
Date: 2020-04-23
Category: Julia, Covid

## Epidemiological Enthusiasm

In the past few weeks the twitter-verse has seen a deluge of amateur
epidemiological models and forecasts (though some of them are quite nice [1]).
Due to the ongoing Coronavirus pademic its understandable that
data science enthusiasts have started to dabble around in epidemiological
modelling. This craze has been subjected to a fair bit of criticism, as
like most modelling in the real world, epidemiological modelling is quite
difficult and requires a good deal of domain knowledge.
One of the posts I came across is called 'Forecasting S-curves is hard' [2].
Its a good demo which shows how widely can s-curve forecasts swing as we
see more data. The tweet by Constance Crozier which shared this post
started off as 'I spent a humiliating amount of time learning how to make
animated graphs, just to illustrate a fairly obvious point' [3].
I empathize with that sentiment having tried similar things in Python before.
In this post I want to share my experience recreating and then enhancing this
demo using Julia. In process I want to bring to light a few excellent features
of the langauge and eco-system.

## S-Curves

## Julia Shines

We first need a s-curve like model to sample ground truth data.
We then sample some noisy data points.

```julia echo=false
using Plots, Distributions, StatsBase
theme(:bright)
gr(
    size = (450, 350),
    leg = false,
    markerstrokewidth = 0,
    markersize = 2,
    bg=colorant"#FFFFF8",
    dpi=300,
    ylims = (-0.3, 1.5),
    xlims = (1, 50)
);
```

```julia
using Plots, Random
p = [1.0, -0.5, 10]
@. model(x, p) = p[1] / (1 + ℯ^(p[2] * x + p[3]))

x = range(0, step = 0.5, length = 100)
y_real = model(x, p);
y_obs = y_real + 0.01 * randn(length(x))

plot(x, y_real)
scatter!(x, y_obs, m=:x, msize=5, c=:grey, alpha=0.8)
```

Then we start our pandemic journey, collecting data
points which can for example, number of infected individuals.
Each step we get a new data point. Using data we have seen
so far and an estimate of the parameter we find the best fit
model.

```julia
using Interact, LsqFit
p_est = [0.5, -0.3, 5.0]

anim = @animate for i = 5:1:100
    fit = curve_fit(model, x[1:i], y_obs[1:i], p_est)
    plot(x, y_real)
    plot!(x, model(x, fit.param))
    scatter!(x[1:i], y_obs[1:i], m=:x,
             alpha=0.8, msize=5, c=:grey)
    vline!([x[i]], c=:grey, style = :dash)
end
gif(anim, fps = 5)
```

## Julia *Really* Shines

```julia
using Measurements

y_obs = model(x, p) .± rand(Normal(0, 1), length(x))

anim = @animate for i = 10:5:100
    plot(x, y_real)
    #plot!(x, model(x .± 0, fit.param .± stderror(fit)))
    fit = curve_fit(model, x[1:i] .± 0, y_obs[1:i], p_est .± 0)
    plot!(x, model(x .± 0, fit.param))
    scatter!(x[1:i], Measurements.value.(y_obs[1:i]), m=:x,
             alpha = 0.8, msize=5, c=:grey)
    vline!([x[i]], c = :grey, style=:dash)
end
gif(anim, fps = 3)

```

## Why does Julia Shine?

---
References:

[1]

[2] https://constancecrozier.com/2020/04/16/forecasting-s-curves-is-hard/

[3]
